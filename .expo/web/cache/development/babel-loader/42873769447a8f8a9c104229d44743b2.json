{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"order\", \"defaultNavigationOptions\", \"navigationOptions\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { NavigationRouteContext } from '@react-navigation/native';\nimport CompatScreen from \"./CompatScreen\";\nimport ScreenPropsContext from \"./ScreenPropsContext\";\nimport createCompatNavigationProp from \"./createCompatNavigationProp\";\nexport default function createCompatNavigatorFactory(createNavigator) {\n  if (createNavigator.isCompat) {\n    throw new Error(\"The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.\");\n  }\n  var createCompatNavigator = function createCompatNavigator(routeConfig) {\n    var navigationConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var Pair = createNavigator();\n    var order = navigationConfig.order,\n      defaultNavigationOptions = navigationConfig.defaultNavigationOptions,\n      parentNavigationOptions = navigationConfig.navigationOptions,\n      restConfig = _objectWithoutProperties(navigationConfig, _excluded);\n    var routeNames = order !== undefined ? order : Object.keys(routeConfig);\n    function Navigator(_ref) {\n      var screenProps = _ref.screenProps;\n      var _React$useContext;\n      var parentRouteParams = (_React$useContext = React.useContext(NavigationRouteContext)) === null || _React$useContext === void 0 ? void 0 : _React$useContext.params;\n      var screens = React.useMemo(function () {\n        return routeNames.map(function (name) {\n          var getScreenComponent;\n          var initialParams;\n          var routeConfigItem = routeConfig[name];\n          if ('getScreen' in routeConfigItem) {\n            getScreenComponent = routeConfigItem.getScreen;\n            initialParams = routeConfigItem.params;\n          } else if ('screen' in routeConfigItem) {\n            getScreenComponent = function getScreenComponent() {\n              return routeConfigItem.screen;\n            };\n            initialParams = routeConfigItem.params;\n          } else {\n            getScreenComponent = function getScreenComponent() {\n              return routeConfigItem;\n            };\n          }\n          var screenOptions = function screenOptions(_ref2) {\n            var navigation = _ref2.navigation,\n              route = _ref2.route;\n            var routeNavigationOptions = routeConfigItem.navigationOptions;\n            var screenNavigationOptions = getScreenComponent().navigationOptions;\n            if (routeNavigationOptions == null && screenNavigationOptions == null) {\n              return undefined;\n            }\n            var options = typeof routeNavigationOptions === 'function' || typeof screenNavigationOptions === 'function' ? {\n              navigation: createCompatNavigationProp(navigation, route, {}),\n              navigationOptions: defaultNavigationOptions || {},\n              screenProps: screenProps\n            } : {};\n            return _objectSpread(_objectSpread({}, typeof routeNavigationOptions === 'function' ? routeNavigationOptions(options) : routeNavigationOptions), typeof screenNavigationOptions === 'function' ? screenNavigationOptions(options) : screenNavigationOptions);\n          };\n          return React.createElement(Pair.Screen, {\n            key: name,\n            name: name,\n            initialParams: _objectSpread(_objectSpread({}, parentRouteParams), initialParams),\n            options: screenOptions\n          }, function () {\n            return React.createElement(CompatScreen, {\n              getComponent: getScreenComponent\n            });\n          });\n        });\n      }, [parentRouteParams, screenProps]);\n      return React.createElement(ScreenPropsContext.Provider, {\n        value: screenProps\n      }, React.createElement(Pair.Navigator, _extends({}, restConfig, {\n        screenOptions: defaultNavigationOptions\n      }), screens));\n    }\n    Navigator.navigationOptions = parentNavigationOptions;\n    return Navigator;\n  };\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get: function get() {\n        return true;\n      }\n    },\n    router: {\n      get: function get() {\n        throw new Error(\"It's no longer possible to access the router with the 'router' property.\");\n      },\n      set: function set() {\n        throw new Error(\"It's no longer possible to override the router by assigning the 'router' property.\");\n      }\n    }\n  });\n  return createCompatNavigator;\n}","map":{"version":3,"mappings":"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","names":["React","NavigationRouteContext","CompatScreen","ScreenPropsContext","createCompatNavigationProp","createCompatNavigatorFactory","createNavigator","isCompat","Error","createCompatNavigator","routeConfig","navigationConfig","Pair","order","defaultNavigationOptions","parentNavigationOptions","navigationOptions","restConfig","routeNames","undefined","Object","keys","Navigator","screenProps","parentRouteParams","useContext","_React$useContext","params","screens","useMemo","map","name","getScreenComponent","initialParams","routeConfigItem","getScreen","screen","screenOptions","navigation","route","routeNavigationOptions","screenNavigationOptions","options","Screen","key","getComponent","Provider","value","defineProperties","get","router","set"],"sources":["createCompatNavigatorFactory.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  TypedNavigator,\n  NavigationProp,\n  RouteProp,\n  NavigationRouteContext,\n} from '@react-navigation/native';\nimport CompatScreen from './CompatScreen';\nimport ScreenPropsContext from './ScreenPropsContext';\nimport createCompatNavigationProp from './createCompatNavigationProp';\nimport type { CompatScreenType, CompatRouteConfig } from './types';\n\nexport default function createCompatNavigatorFactory<\n  CreateNavigator extends () => TypedNavigator<\n    ParamListBase,\n    NavigationState,\n    {},\n    any,\n    React.ComponentType<any>\n  >\n>(createNavigator: CreateNavigator) {\n  // @ts-expect-error: isCompat may or may not exist\n  if (createNavigator.isCompat) {\n    throw new Error(\n      `The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.`\n    );\n  }\n\n  const createCompatNavigator = <\n    NavigationPropType extends NavigationProp<any, any, any, any, any>,\n    ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n      infer P,\n      any,\n      any,\n      any,\n      any\n    >\n      ? P\n      : ParamListBase,\n    ScreenOptions extends {} = NavigationPropType extends NavigationProp<\n      any,\n      any,\n      any,\n      infer O\n    >\n      ? O\n      : {},\n    NavigationConfig extends {} = React.ComponentProps<\n      ReturnType<CreateNavigator>['Navigator']\n    >\n  >(\n    routeConfig: CompatRouteConfig<NavigationPropType>,\n    navigationConfig: Partial<Omit<NavigationConfig, 'screenOptions'>> & {\n      order?: Extract<keyof ParamList, string>[];\n      defaultNavigationOptions?: ScreenOptions;\n      navigationOptions?: Record<string, any>;\n    } = {}\n  ) => {\n    const Pair = createNavigator();\n\n    const {\n      order,\n      defaultNavigationOptions,\n      navigationOptions: parentNavigationOptions,\n      ...restConfig\n    } = navigationConfig;\n\n    const routeNames = order !== undefined ? order : Object.keys(routeConfig);\n\n    function Navigator({ screenProps }: { screenProps?: unknown }) {\n      const parentRouteParams = React.useContext(NavigationRouteContext)\n        ?.params;\n\n      const screens = React.useMemo(\n        () =>\n          routeNames.map((name) => {\n            let getScreenComponent: () => CompatScreenType<NavigationPropType>;\n\n            let initialParams;\n\n            const routeConfigItem = routeConfig[name];\n\n            if ('getScreen' in routeConfigItem) {\n              getScreenComponent = routeConfigItem.getScreen;\n              initialParams = routeConfigItem.params;\n            } else if ('screen' in routeConfigItem) {\n              getScreenComponent = () => routeConfigItem.screen;\n              initialParams = routeConfigItem.params;\n            } else {\n              getScreenComponent = () => routeConfigItem;\n            }\n\n            const screenOptions = ({\n              navigation,\n              route,\n            }: {\n              navigation: NavigationPropType;\n              route: RouteProp<ParamList, keyof ParamList> & {\n                state?: NavigationState | PartialState<NavigationState>;\n              };\n            }) => {\n              // @ts-expect-error: navigationOptions may exists on the component, but TS is dumb\n              const routeNavigationOptions = routeConfigItem.navigationOptions;\n              const screenNavigationOptions = getScreenComponent()\n                .navigationOptions;\n\n              if (\n                routeNavigationOptions == null &&\n                screenNavigationOptions == null\n              ) {\n                return undefined;\n              }\n\n              const options =\n                typeof routeNavigationOptions === 'function' ||\n                typeof screenNavigationOptions === 'function'\n                  ? {\n                      navigation: createCompatNavigationProp<\n                        NavigationPropType,\n                        ParamList\n                      >(navigation, route, {}),\n                      navigationOptions: defaultNavigationOptions || {},\n                      screenProps,\n                    }\n                  : {};\n\n              return {\n                ...(typeof routeNavigationOptions === 'function'\n                  ? routeNavigationOptions(options)\n                  : routeNavigationOptions),\n                ...(typeof screenNavigationOptions === 'function'\n                  ? (screenNavigationOptions as (o: any) => ScreenOptions)(\n                      options\n                    )\n                  : screenNavigationOptions),\n              } as ScreenOptions;\n            };\n\n            return (\n              <Pair.Screen\n                key={name}\n                name={name}\n                initialParams={{ ...parentRouteParams, ...initialParams }}\n                options={screenOptions}\n              >\n                {() => <CompatScreen getComponent={getScreenComponent} />}\n              </Pair.Screen>\n            );\n          }),\n        [parentRouteParams, screenProps]\n      );\n\n      return (\n        <ScreenPropsContext.Provider value={screenProps}>\n          <Pair.Navigator\n            {...(restConfig as NavigationConfig)}\n            screenOptions={defaultNavigationOptions}\n          >\n            {screens}\n          </Pair.Navigator>\n        </ScreenPropsContext.Provider>\n      );\n    }\n\n    Navigator.navigationOptions = parentNavigationOptions;\n\n    return Navigator;\n  };\n\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get() {\n        return true;\n      },\n    },\n    router: {\n      get() {\n        throw new Error(\n          \"It's no longer possible to access the router with the 'router' property.\"\n        );\n      },\n      set() {\n        throw new Error(\n          \"It's no longer possible to override the router by assigning the 'router' property.\"\n        );\n      },\n    },\n  });\n\n  return createCompatNavigator;\n}\n"]},"metadata":{},"sourceType":"module"}