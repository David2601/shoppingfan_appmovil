{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onRef\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { useIsFocused } from '@react-navigation/native';\nexport default function withNavigationFocus(Comp) {\n  var WrappedComponent = function WrappedComponent(_ref) {\n    var onRef = _ref.onRef,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var isFocused = useIsFocused();\n\n    return React.createElement(Comp, _extends({\n      ref: onRef,\n      isFocused: isFocused\n    }, rest));\n  };\n  WrappedComponent.displayName = \"withNavigationFocus(\".concat(Comp.displayName || Comp.name, \")\");\n  return WrappedComponent;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAMA,eAAe,SAASC,mBAAT,CAGbC,IAHa,EAGJ;EACT,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,OAOI;IAAA,IANxBC,KADwB,QACxBA,KADwB;MAErBC;IAMH,IAAMC,SAAS,GAAGN,YAAY,EAA9B;;IAGA,OAAOD,oBAACG,IAAD;MAAMK,GAAG,EAAEH,KAAX;MAAkBE,SAAS,EAAEA;IAA7B,GAA4CD,IAA5C,EAAP;EACD,CAZD;EAcAF,gBAAgB,CAACK,WAAjB,iCACEN,IAAI,CAACM,WAAL,IAAoBN,IAAI,CAACO,IAD3B;EAIA,OAAON,gBAAP;AACD","names":["React","useIsFocused","withNavigationFocus","Comp","WrappedComponent","onRef","rest","isFocused","ref","displayName","name"],"sources":["withNavigationFocus.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useIsFocused } from '@react-navigation/native';\n\ntype InjectedProps = {\n  isFocused: boolean;\n};\n\nexport default function withNavigationFocus<\n  P extends InjectedProps,\n  C extends React.ComponentType<P>\n>(Comp: C) {\n  const WrappedComponent = ({\n    onRef,\n    ...rest\n  }: Exclude<P, InjectedProps> & {\n    onRef?: C extends React.ComponentClass<any>\n      ? React.Ref<InstanceType<C>>\n      : never;\n  }): React.ReactElement => {\n    const isFocused = useIsFocused();\n\n    // @ts-expect-error: type checking HOC is hard\n    return <Comp ref={onRef} isFocused={isFocused} {...rest} />;\n  };\n\n  WrappedComponent.displayName = `withNavigationFocus(${\n    Comp.displayName || Comp.name\n  })`;\n\n  return WrappedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}