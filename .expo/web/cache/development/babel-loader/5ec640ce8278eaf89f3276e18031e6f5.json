{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { loadAsync } from 'expo-font';\n\nexport function useFonts(map) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loaded = _useState2[0],\n    setLoaded = _useState2[1];\n  useEffect(function () {\n    loadAsync(map).then(function () {\n      return setLoaded(true);\n    });\n  }, []);\n\n  return [loaded];\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAqBC,SAArB,QAAsC,WAAtC;;AAYA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAA2C;EACjD,gBAA4BH,QAAQ,CAAC,KAAD,CAApC;IAAA;IAAOI,MAAD;IAASC,SAAT;EAENN,SAAS,CAAC,YAAM;IACfE,SAAS,CAACE,GAAD,CAAT,CAAeG,IAAf,CAAoB;MAAA,OAAMD,SAAS,CAAC,IAAD,CAAnC;IAAA;EACA,CAFQ,EAEN,EAFM,CAAT;;EAQA,OAAO,CAACD,MAAD,CAAP;AACA","names":["useEffect","useState","loadAsync","useFonts","map","loaded","setLoaded","then"],"sources":["use-fonts.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { FontSource, loadAsync } from 'expo-font';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [isLoaded] = useFonts(...);\n */\nexport function useFonts(map: FontMap): [boolean] {\n\tconst [loaded, setLoaded] = useState(false);\n\n\tuseEffect(() => {\n\t\tloadAsync(map).then(() => setLoaded(true))\n\t}, []); // eslint-disable-line\n\n\t// note: to avoid any ambiguity fonts are only loaded once\n\t// since every rerender is a new object, we have no way of\n\t// detecting a new map and updating the loaded state based on that\n\n\treturn [loaded];\n}\n\ninterface FontMap {\n\t[name: string]: FontSource;\n}\n"]},"metadata":{},"sourceType":"module"}