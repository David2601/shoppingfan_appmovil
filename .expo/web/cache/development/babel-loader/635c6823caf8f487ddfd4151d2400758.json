{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AppLoading from \"expo-app-loading\";\nimport { useFonts } from '@use-expo/font';\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar assetImages = [Images.Onboarding, Images.LogoOnboarding, Images.Logo, Images.Pro, Images.ArgonLogo, Images.iOSLogo, Images.androidLogo];\n\narticles.map(function (article) {\n  return assetImages.push(article.image);\n});\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\nexport default (function (props) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoadingComplete = _useState2[0],\n    setLoading = _useState2[1];\n  var _useFonts = useFonts({\n      'ArgonExtra': require(\"./assets/font/argon.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  function _loadResourcesAsync() {\n    return Promise.all(_toConsumableArray(cacheImages(assetImages)));\n  }\n  function _handleLoadingError(error) {\n    console.warn(error);\n  }\n  ;\n  function _handleFinishLoading() {\n    setLoading(true);\n  }\n  ;\n  if (!fontsLoaded && !isLoadingComplete) {\n    return _jsx(AppLoading, {\n      startAsync: _loadResourcesAsync,\n      onError: _handleLoadingError,\n      onFinish: _handleFinishLoading\n    });\n  } else if (fontsLoaded) {\n    return _jsx(NavigationContainer, {\n      children: _jsx(GalioProvider, {\n        theme: argonTheme,\n        children: _jsx(Block, {\n          flex: true,\n          children: _jsx(Screens, {})\n        })\n      })\n    });\n  } else {\n    return null;\n  }\n});","map":{"version":3,"names":["React","useState","AppLoading","useFonts","Asset","Block","GalioProvider","NavigationContainer","enableScreens","Screens","Images","articles","argonTheme","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","props","isLoadingComplete","setLoading","require","fontsLoaded","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading"],"sources":["C:/Users/David Gurrola/Documents/Universidad/10mo Cuatri/Integradora/shopping_fan/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport { Image } from \"react-native\";\nimport AppLoading from \"expo-app-loading\";\nimport { useFonts } from '@use-expo/font';\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\n// Before rendering any navigation stack\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\n\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\n\n// cache app images\nconst assetImages = [\n  Images.Onboarding,\n  Images.LogoOnboarding,\n  Images.Logo,\n  Images.Pro,\n  Images.ArgonLogo,\n  Images.iOSLogo,\n  Images.androidLogo\n];\n\n// cache product images\narticles.map(article => assetImages.push(article.image));\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default props => {\n  const [isLoadingComplete, setLoading] = useState(false);\n  let [fontsLoaded] = useFonts({\n    'ArgonExtra': require('./assets/font/argon.ttf'),\n  });\n\n  function _loadResourcesAsync() {\n    return Promise.all([...cacheImages(assetImages)]);\n  }\n\n  function _handleLoadingError(error) {\n    // In this case, you might want to report the error to your error\n    // reporting service, for example Sentry\n    console.warn(error);\n  };\n\n function _handleFinishLoading() {\n    setLoading(true);\n  };\n\n  if(!fontsLoaded && !isLoadingComplete) {\n    return (\n      <AppLoading\n        startAsync={_loadResourcesAsync}\n        onError={_handleLoadingError}\n        onFinish={_handleFinishLoading}\n      />\n    );\n  } else if(fontsLoaded) {\n    return (\n      <NavigationContainer>\n        <GalioProvider theme={argonTheme}>\n          <Block flex>\n            <Screens />\n          </Block>\n        </GalioProvider>\n      </NavigationContainer>\n    );\n  } else {\n    return null\n  }\n}\n\n// export default class App extends React.Component {\n//   state = {\n//     isLoadingComplete: false\n//   };\n\n//   render() {\n//     if (!this.state.isLoadingComplete) {\n//       return (\n//         <AppLoading\n//           startAsync={this._loadResourcesAsync}\n//           onError={this._handleLoadingError}\n//           onFinish={this._handleFinishLoading}\n//         />\n//       );\n//     } else {\n//       return (\n//         <NavigationContainer>\n//           <GalioProvider theme={argonTheme}>\n//             <Block flex>\n//               <Screens />\n//             </Block>\n//           </GalioProvider>\n//         </NavigationContainer>\n//       );\n//     }\n//   }\n\n//   _loadResourcesAsync = async () => {\n//     return Promise.all([...cacheImages(assetImages)]);\n//   };\n\n//   _handleLoadingError = error => {\n//     // In this case, you might want to report the error to your error\n//     // reporting service, for example Sentry\n//     console.warn(error);\n//   };\n\n//   _handleFinishLoading = () => {\n//     this.setState({ isLoadingComplete: true });\n//   };\n// }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC;AAEtC,OAAOC,UAAU,MAAM,kBAAkB;AACzC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,KAAK,EAAEC,aAAa,QAAQ,iBAAiB;AACtD,SAASC,mBAAmB,QAAQ,0BAA0B;;AAG9D,SAASC,aAAa,QAAQ,sBAAsB;AACpDA,aAAa,EAAE;AAEf,OAAOC,OAAO;AACd,SAASC,MAAM,EAAEC,QAAQ,EAAEC,UAAU;;AAAsB;AAG3D,IAAMC,WAAW,GAAG,CAClBH,MAAM,CAACI,UAAU,EACjBJ,MAAM,CAACK,cAAc,EACrBL,MAAM,CAACM,IAAI,EACXN,MAAM,CAACO,GAAG,EACVP,MAAM,CAACQ,SAAS,EAChBR,MAAM,CAACS,OAAO,EACdT,MAAM,CAACU,WAAW,CACnB;;AAGDT,QAAQ,CAACU,GAAG,CAAC,UAAAC,OAAO;EAAA,OAAIT,WAAW,CAACU,IAAI,CAACD,OAAO,CAACE,KAAK,CAAC;AAAA,EAAC;AAExD,SAASC,WAAW,CAACC,MAAM,EAAE;EAC3B,OAAOA,MAAM,CAACL,GAAG,CAAC,UAAAG,KAAK,EAAI;IACzB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOG,KAAK,CAACC,QAAQ,CAACJ,KAAK,CAAC;IAC9B,CAAC,MAAM;MACL,OAAOpB,KAAK,CAACyB,UAAU,CAACL,KAAK,CAAC,CAACM,aAAa,EAAE;IAChD;EACF,CAAC,CAAC;AACJ;AAEA,gBAAe,UAAAC,KAAK,EAAI;EACtB,gBAAwC9B,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAhD+B,iBAAiB;IAAEC,UAAU;EACpC,gBAAoB9B,QAAQ,CAAC;MAC3B,YAAY,EAAE+B,OAAO;IACvB,CAAC,CAAC;IAAA;IAFGC,WAAW;EAIhB,SAASC,mBAAmB,GAAG;IAC7B,OAAOC,OAAO,CAACC,GAAG,oBAAKb,WAAW,CAACZ,WAAW,CAAC,EAAE;EACnD;EAEA,SAAS0B,mBAAmB,CAACC,KAAK,EAAE;IAGlCC,OAAO,CAACC,IAAI,CAACF,KAAK,CAAC;EACrB;EAAC;EAEF,SAASG,oBAAoB,GAAG;IAC7BV,UAAU,CAAC,IAAI,CAAC;EAClB;EAAC;EAED,IAAG,CAACE,WAAW,IAAI,CAACH,iBAAiB,EAAE;IACrC,OACE,KAAC,UAAU;MACT,UAAU,EAAEI,mBAAoB;MAChC,OAAO,EAAEG,mBAAoB;MAC7B,QAAQ,EAAEI;IAAqB,EAC/B;EAEN,CAAC,MAAM,IAAGR,WAAW,EAAE;IACrB,OACE,KAAC,mBAAmB;MAAA,UAClB,KAAC,aAAa;QAAC,KAAK,EAAEvB,UAAW;QAAA,UAC/B,KAAC,KAAK;UAAC,IAAI;UAAA,UACT,KAAC,OAAO;QAAG;MACL;IACM,EACI;EAE1B,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module"}